import os
import time
import random
import json
import threading
from datetime import datetime
import schedule

# –î–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ['BOT_TOKEN']

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_FILE = "bot_settings.json"

def load_settings():
    default_settings = {
        "reminder_times": ["22:00"],
        "messages": [
            "–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫! üòä –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏!",
            "–≠–π, —Å–æ–ª–Ω—ã—à–∫–æ! üåû –ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ —Ç–∞–±–ª–µ—Ç–∫–∏!",
            "–ö–æ—Ç–∏–∫, –≤—Ä–µ–º—è –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏! üíä –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
            "–ú—É—Ä-–º—É—Ä! üê± –¢–∞–±–ª–µ—Ç–∫–∏ –∂–¥—É—Ç!",
            "–õ—é–±–∏–º–∞—è, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–æ–∫! üíñ"
        ],
        "user_chat_id": None
    }
    
    try:
        with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return default_settings

def save_settings(settings):
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = load_settings()

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start_command(update: Update, context: CallbackContext):
    settings["user_chat_id"] = update.effective_chat.id
    save_settings(settings)
    
    keyboard = [[KeyboardButton("–í—ã–ø–∏–ª–∞! ‚úÖ")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö! üíä\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤: {', '.join(settings['reminder_times'])}\n"
        "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –ø—Ä–∏–º–µ—à—å —Ç–∞–±–ª–µ—Ç–∫–∏!"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! Chat ID: {settings['user_chat_id']}")

async def settime_command(update: Update, context: CallbackContext):
    if context.args:
        new_times = context.args
        valid_times = []
        for time_str in new_times:
            try:
                datetime.strptime(time_str, "%H:%M")
                valid_times.append(time_str)
            except ValueError:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {time_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
                return
        
        settings["reminder_times"] = valid_times
        save_settings(settings)
        
        await update.message.reply_text(f"‚úÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {', '.join(valid_times)}")
        print(f"‚è∞ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ: {valid_times}")

async def addmessage_command(update: Update, context: CallbackContext):
    if context.args:
        new_message = " ".join(context.args)
        settings["messages"].append(new_message)
        save_settings(settings)
        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ: /addmessage –í–∞—à —Ç–µ–∫—Å—Ç")

async def handle_pill_taken(update: Update, context: CallbackContext):
    responses = ["–î–∞ —Ç—ã –º–æ—è –∑–∞—è‚ù§Ô∏è", "–£–º–Ω–∏—á–∫–∞. –õ—é–±–ª—é —Ç–µ–±—è‚ù§Ô∏è", "–ö–∞–∫–∞—è –º–æ–ª–æ–¥–µ—Üüí™", "–ö–∏—Å–∞ –º–æ–ª–æ–¥–µ—Üüòä"]
    await update.message.reply_text(random.choice(responses))

async def send_reminder():
    if not settings.get("user_chat_id"):
        print("‚ùå Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        keyboard = [[KeyboardButton("–í—ã–ø–∏–ª–∞! ‚úÖ")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        message = random.choice(settings["messages"])
        
        await application.bot.send_message(
            chat_id=settings["user_chat_id"],
            text=message,
            reply_markup=reply_markup
        )
        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def run_reminder():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ event loop"""
    import asyncio
    asyncio.run(send_reminder())

def check_time_and_remind():
    print("‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω...")
    
    while True:
        try:
            current_time = datetime.now().strftime("%H:%M")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            global settings
            settings = load_settings()
            
            if current_time in settings["reminder_times"]:
                run_reminder()
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
            time.sleep(60)

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("settime", settime_command))
    application.add_handler(CommandHandler("addmessage", addmessage_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–í—ã–ø–∏–ª–∞! ‚úÖ$"), handle_pill_taken))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    timer_thread = threading.Thread(target=check_time_and_remind)
    timer_thread.daemon = True
    timer_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()